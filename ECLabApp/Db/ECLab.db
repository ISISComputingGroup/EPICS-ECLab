## @file
## EPICS db file

# % macro, P, device prefix
# % macro, Q, device sub-prefix
# % macro, CHAN, channel number


record(bo, "$(P)$(Q):SAVEDATA:SP")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),0,0)SAVEDATA")
	field(ZNAM, "No")
	field(ONAM, "Yes")
	field(VAL, 1)
	field(PINI, "YES")
}

record(bi, "$(P)$(Q):SAVEDATA")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),0,0)SAVEDATA")
	field(ZNAM, "No")
	field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(Q):FILEPREFIX:SP")
{
    field(DTYP, "asynOctetWrite")
    field(INP, "@asyn($(PORT),0,0)FILEPREFIX")
	field(NELM, "256")
	field(FTVL, "CHAR")
}

record(waveform, "$(P)$(Q):FILEPREFIX")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT),0,0)FILEPREFIX")
	field(NELM, "256")
	field(FTVL, "CHAR")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(Q):VERSION")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT),0,0)VERSION")
    field(PINI, "YES")
}

record(stringin, "$(P)$(Q):HOST")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT),0,0)HOST")
    field(PINI, "YES")
}

record(longin, "$(P)$(Q):DEVCODE")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),0,0)DEVCODE")
    field(PINI, "YES")
}

record(longin, "$(P)$(Q):NUMCHANNELS")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),0,0)NUMCHANNELS")
    field(PINI, "YES")
}

record(longin, "$(P)$(Q):NUMSLOTS")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),0,0)NUMSLOTS")
    field(PINI, "YES")
}

# channel specific current information

## number of techniques loaded on channel
record(longin, "$(P)$(Q):C$(CHAN):NUMTECH" )
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(CHAN),0)NUMTECH")
	field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(Q):C$(CHAN):MEMFILLED" )
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(CHAN),0)MEMFILLED")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(Q):C$(CHAN):TB" )
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(CHAN),0)CURR_TB")
	field(SCAN, "I/O Intr")
}

## Current EWE Value
record(ai, "$(P)$(Q):C$(CHAN):EWE")
{
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(CHAN),0)CURR_EWE")
	field(SCAN, "I/O Intr")
	field(PREC, 3)
	field(EGU, "V")
}

## Current ECE Value
record(ai, "$(P)$(Q):C$(CHAN):ECE")
{
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(CHAN),0)CURR_ECE")
	field(SCAN, "I/O Intr")
	field(PREC, 3)
	field(EGU, "V")
}

record(ai, "$(P)$(Q):C$(CHAN):I")
{
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(CHAN),0)CURR_I")
	field(SCAN, "I/O Intr")
	field(PREC, 3)
	field(EGU, "A")
}

record(ai, "$(P)$(Q):C$(CHAN):TIME")
{
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(CHAN),0)CURR_TIME")
	field(SCAN, "I/O Intr")
	field(PREC, 3)
	field(EGU, "s")
}

record(ai, "$(P)$(Q):C$(CHAN):RCOMP")
{
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(CHAN),0)CURR_RCOMP")
	field(SCAN, "I/O Intr")
	field(PREC, 3)
	field(EGU, "ohm")
}

record(ai, "$(P)$(Q):C$(CHAN):FREQ")
{
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),$(CHAN),0)CURR_FREQ")
	field(SCAN, "I/O Intr")
	field(PREC, 3)
	field(EGU, "Hz")
}

record(mbbi, "$(P)$(Q):C$(CHAN):STATE")
{
    field(ZRST, "Stopped")
	field(ZRVL, 0)
	field(ONST, "Running")
	field(ONVL, 1)
	field(TWST, "Paused")
	field(TWVL, 2)
	field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(CHAN),0)CURR_STATE")
}

# erange
#record(mbbi, "$(P)$(Q):C$(CHAN):STATE")
#{
#    field(ZRST, "2.5 V")
#	field(ZRVL, 0)
#	field(ONST, "5 V")
#	field(ONVL, 1)
#	field(TWST, "10 V")
#	field(TWVL, 2)
#	field(THST, "Auto")
#	field(THVL, 3)
#	field(SCAN, "I/O Intr")
 #   field(DTYP, "asynInt32")
  #  field(INP, "@asyn($(PORT),$(CHAN),0)CURR_STATE")
#}

# bandwidth
#record(mbbi, "$(P)$(Q):C$(CHAN):STATE")
#{
#    field(ZRST, "ERROR")
#	field(ZRVL, 0)
#	field(ONST, "BW_1")
#	field(ONVL, 1)
#	field(TWST, "BW_2")
#	field(TWVL, 2)
#	field(THST, "BW_3")
#	field(THVL, 3)
#	field(SCAN, "I/O Intr")
 #   field(DTYP, "asynInt32")
  #  field(INP, "@asyn($(PORT),$(CHAN),0)CURR_STATE")
#}

# start and stop collection 

## start collecting
record(bo, "$(P)$(Q):C$(CHAN):START" )
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(CHAN),0)STARTCHANNEL")
	field(ZNAM, "")
	field(ONAM, "Starting")
	field(FLNK, "$(P)$(Q):C$(CHAN):_START")
}

record(bo, "$(P)$(Q):C$(CHAN):_START")
{
    field(VAL, 0)
    field(OUT, "$(P)$(Q):C$(CHAN):START NPP")
}

## stop collecting
record(bo, "$(P)$(Q):C$(CHAN):STOP" )
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(CHAN),0)STOPCHANNEL")
	field(ZNAM, "")
	field(ONAM, "Stopping")
	field(FLNK, "$(P)$(Q):C$(CHAN):_STOP")
}

record(bo, "$(P)$(Q):C$(CHAN):_STOP")
{
    field(VAL, 0)
    field(OUT, "$(P)$(Q):C$(CHAN):STOP NPP")
}

## this will load the specified list of comma separated techniques
## onto the channel using parameter value that
## have been set by previous calls to (P)$(Q):C(CHAN):T:(TECH):(PARAM)
## use the technique filename with out the suffix e.g. ocv
record(stringout, "$(P)$(Q):C$(CHAN):LOADTECH:SP")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT),$(CHAN),0)LOADTECH")
}

## this will specify the list of comma separated techniques
## on the channel but not load them - it assumes they have been loaded
## by the potentiostat vendor software
record(stringout, "$(P)$(Q):C$(CHAN):DEFINETECH:SP")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT),$(CHAN),0)DEFINETECH")
}

# techniques currently loaded
record(stringin, "$(P)$(Q):C$(CHAN):LOADTECH")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT),$(CHAN),0)LOADTECH")
	field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(Q):C$(CHAN):DEFINETECH")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT),$(CHAN),0)DEFINETECH")
	field(SCAN, "I/O Intr")
}

## send changed parameter values to running technique
record(bo, "$(P)$(Q):C$(CHAN):UPDATE:SP")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(CHAN),0)UPDATE")
}
